[
  {
    "objectID": "examples/example_01.html",
    "href": "examples/example_01.html",
    "title": "Penguins",
    "section": "",
    "text": "A simple example based on Allison Horst’s Palmer Penguins dataset. Here we look at how penguin body mass varies across both sex and species (use the provided inputs to filter the dataset by bill length and island):\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass_g\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\n\n\n\ndata = FileAttachment(\"penguins.csv\").csv({ typed: true })\n\n\n\n\n\n\n\nfiltered = data.filter(function(penguin) {\n  return bill_length_min &lt; penguin.bill_length_mm &&\n         islands.includes(penguin.island);\n})",
    "crumbs": [
      "Examples",
      "Penguins"
    ]
  },
  {
    "objectID": "exercises/haverbeke-solutions.html",
    "href": "exercises/haverbeke-solutions.html",
    "title": "CSC 324",
    "section": "",
    "text": "function notify(text) {\n  console.log(`\\nTesting ${text} ...\\n`);\n}\n\n/****************************************************\nLooping a Triangle\n\n Write a loop that makes seven calls to console.log to \n output the following triangle:\n\n#\n##\n###\n####\n#####\n######\n#######\n\nNotes on my solution:\n\nI wondered if Javascript had a function like R's rep(),\nso I googled \"javascript repeat character\" and found a\nnumber of sites, including:\n\nhttps://stackoverflow.com/questions/1877475/repeat-character-n-times\n\nThe repeat method for strings turned out to be just what\nI was looking for!\n\n*****************************************************/\n\nnotify(\"Looping a Triangle\");\n\nfor (let i = 1; i &lt;= 7; i++) {\n  console.log(\"#\".repeat(i));\n}\n\n/**************************************************************\n * \n * FizzBuzz\n * \n * Write a program that uses console.log to print all the numbers\n * from 1 to 100, with two exceptions. For numbers divisible by 3, \n * print \"Fizz\" instead of the number, and for numbers divisible by 5 \n * (and not 3), print \"Buzz\" instead.\n * \n * When you have that working, modify your program to print \n * \"FizzBuzz\" for numbers that are divisible by both 3 and 5 \n * (and still print \"Fizz\" or \"Buzz\" for numbers divisible by \n * only one of those).\n * \n ******************************************************************/\n\n // Version One\n notify(\"FizzBuzz, Version 1\");\nfor (let i = 1; i &lt;= 100; i++) {\n  if (i % 3 === 0) {\n    console.log(\"Fizz\");\n  } else if (i % 5 === 0) {\n      console.log(\"Buzz\");\n  } else {\n    console.log(i);\n  }\n}\n\n// Version Two\nnotify(\"FizzBuzz, Version 2\");\nfor (let i = 1; i &lt;= 100; i++) {\n  if (i % 15 === 0) {\n    console.log(\"FizzBuzz\");\n  } else if (i % 3 === 0) {\n      console.log(\"Fizz\");\n  } else if (i % 5 === 0) {\n    console.log(\"Buzz\");\n  } else {\n    console.log(i);\n  }\n}\n\n/*******************************************************************\n * \n * Chessboard\n * \n * Write a program that creates a string that represents an 8×8 \n * grid, using newline characters to separate lines. At each \n * position of the grid there is either a space or a \"#\" \n * character. The characters should form a chessboard.\n * \n * Passing this string to console.log should show something like this:\n\n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # #\n\n\n * When you have a program that generates this pattern, define a \n * binding size = 8 and change the program so that it works \n * for any size, outputting a grid of the given width and height.\n * \n ********************************************************************/\n\n// I'll move directly to the more general version\n\nconst size = 9;\nconst pairs = Math.floor(size / 2),\n      oddRow = \" #\".repeat(pairs) + \"\\n\",\n      evenRow = \"# \".repeat(pairs) + \"\\n\",\n      twoRows = oddRow + evenRow,\n      board = twoRows.repeat(pairs),\n      extraRow = size %2 === 1 ? oddRow : '';\n\nnotify(`Chessboard, with size = ${size}`);\nconsole.log(board + extraRow);",
    "crumbs": [
      "Exercises",
      "Dr. White's Eloquent JS Solutions"
    ]
  },
  {
    "objectID": "exercises/haverbeke-solutions.html#chapter-2-solutions",
    "href": "exercises/haverbeke-solutions.html#chapter-2-solutions",
    "title": "CSC 324",
    "section": "",
    "text": "function notify(text) {\n  console.log(`\\nTesting ${text} ...\\n`);\n}\n\n/****************************************************\nLooping a Triangle\n\n Write a loop that makes seven calls to console.log to \n output the following triangle:\n\n#\n##\n###\n####\n#####\n######\n#######\n\nNotes on my solution:\n\nI wondered if Javascript had a function like R's rep(),\nso I googled \"javascript repeat character\" and found a\nnumber of sites, including:\n\nhttps://stackoverflow.com/questions/1877475/repeat-character-n-times\n\nThe repeat method for strings turned out to be just what\nI was looking for!\n\n*****************************************************/\n\nnotify(\"Looping a Triangle\");\n\nfor (let i = 1; i &lt;= 7; i++) {\n  console.log(\"#\".repeat(i));\n}\n\n/**************************************************************\n * \n * FizzBuzz\n * \n * Write a program that uses console.log to print all the numbers\n * from 1 to 100, with two exceptions. For numbers divisible by 3, \n * print \"Fizz\" instead of the number, and for numbers divisible by 5 \n * (and not 3), print \"Buzz\" instead.\n * \n * When you have that working, modify your program to print \n * \"FizzBuzz\" for numbers that are divisible by both 3 and 5 \n * (and still print \"Fizz\" or \"Buzz\" for numbers divisible by \n * only one of those).\n * \n ******************************************************************/\n\n // Version One\n notify(\"FizzBuzz, Version 1\");\nfor (let i = 1; i &lt;= 100; i++) {\n  if (i % 3 === 0) {\n    console.log(\"Fizz\");\n  } else if (i % 5 === 0) {\n      console.log(\"Buzz\");\n  } else {\n    console.log(i);\n  }\n}\n\n// Version Two\nnotify(\"FizzBuzz, Version 2\");\nfor (let i = 1; i &lt;= 100; i++) {\n  if (i % 15 === 0) {\n    console.log(\"FizzBuzz\");\n  } else if (i % 3 === 0) {\n      console.log(\"Fizz\");\n  } else if (i % 5 === 0) {\n    console.log(\"Buzz\");\n  } else {\n    console.log(i);\n  }\n}\n\n/*******************************************************************\n * \n * Chessboard\n * \n * Write a program that creates a string that represents an 8×8 \n * grid, using newline characters to separate lines. At each \n * position of the grid there is either a space or a \"#\" \n * character. The characters should form a chessboard.\n * \n * Passing this string to console.log should show something like this:\n\n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # #\n\n\n * When you have a program that generates this pattern, define a \n * binding size = 8 and change the program so that it works \n * for any size, outputting a grid of the given width and height.\n * \n ********************************************************************/\n\n// I'll move directly to the more general version\n\nconst size = 9;\nconst pairs = Math.floor(size / 2),\n      oddRow = \" #\".repeat(pairs) + \"\\n\",\n      evenRow = \"# \".repeat(pairs) + \"\\n\",\n      twoRows = oddRow + evenRow,\n      board = twoRows.repeat(pairs),\n      extraRow = size %2 === 1 ? oddRow : '';\n\nnotify(`Chessboard, with size = ${size}`);\nconsole.log(board + extraRow);",
    "crumbs": [
      "Exercises",
      "Dr. White's Eloquent JS Solutions"
    ]
  },
  {
    "objectID": "exercises/haverbeke-solutions.html#chapter-3-solutions",
    "href": "exercises/haverbeke-solutions.html#chapter-3-solutions",
    "title": "CSC 324",
    "section": "Chapter 3 Solutions",
    "text": "Chapter 3 Solutions\nfunction notify(text) {\n  console.log(`\\nTesting ${text} ...\\n`);\n}\n\n/****************************************************\n MINIMUM\n\n The previous chapter introduced the standard function\n Math.min that returns its smallest argument. We can\n do that ourselves now. Write a function min that takes\n two arguments and returns their minimum.\n *****************************************************/\n\nfunction min(x, y) {\n  return x &lt;= y ? x : y;\n}\n\nnotify(\"min\");\nconsole.log(min(5, 3));\nconsole.log(min(-2, 3));\n\n// another version:\nlet min2 = (x, y) =&gt; x &lt;= y ? x : y;\n\nnotify(\"min2\");\nconsole.log(\"min2\", -4, 6, min2(-4, 6));\n\n/*******************************************************\n * RECURSION\n *\n * Recursive function to determine if a number is even\n *******************************************************/\n\nfunction isEven(n) {\n  n = n &gt;= 0 ? n : -n;\n  if ( n === 0 ) return true;\n  if ( n === 1 ) return false;\n  return isEven(n - 2);\n}\n\nnotify(\"isEven\");\nconsole.log(isEven(50));\nconsole.log(isEven(-27));\n\n/*******************************************************\n * Bean Counting\n *\n * Function to count number of occurences of a character\n * in a string\n *******************************************************/\n\nfunction countChar(str, char) {\n  let count = 0;\n  for ( let n = 0; n &lt; str.length; n++ ) {\n    count += str[n] === char ? 1 : 0;\n  }\n  return count;\n}\n\nnotify(\"countChar\");\nconsole.log(countChar(\"hello\", \"l\"));",
    "crumbs": [
      "Exercises",
      "Dr. White's Eloquent JS Solutions"
    ]
  },
  {
    "objectID": "exercises/haverbeke-solutions.html#chapter-4-solutions",
    "href": "exercises/haverbeke-solutions.html#chapter-4-solutions",
    "title": "CSC 324",
    "section": "Chapter 4 Solutions",
    "text": "Chapter 4 Solutions\nfunction notify(text) {\n    console.log(`\\nTesting ${text} ...\\n`);\n}\n\n/**************************************************************\n * SUM AND RANGE\n * \n * Write a range function that takes two arguments, start and \n * end, and returns an array containing all the numbers from \n * start up to (and including) end.\n * \n * Next, write a sum function that takes an array of numbers \n * and returns the sum of these numbers. Run the example \n * program and see whether it does indeed return 55.\n * \n * As a bonus assignment, modify your range function to take\n *  an optional third argument that indicates the “step” value\n *  used when building the array. If no step is given, the \n * elements go up by increments of one, corresponding to the \n * old behavior. The function call range(1, 10, 2) should return\n *  [1, 3, 5, 7, 9]. Make sure it also works with negative step\n *  values so that range(5, 2, -1) produces [5, 4, 3, 2].\n ****************************************************************/\n\nfunction range(start, stop, step = 1) {\n    let arr = [];\n    function finished(c, t) {\n        return step &gt; 0 ? c &gt; t : c &lt; t;\n    }\n    let current = start;\n    while (!finished(current, stop)) {\n        arr.push(current);\n        current += step;\n    }\n    return arr;\n}\n\nfunction sum(arr) {\n    let sum = 0;\n    for (let elem of arr) {\n        sum += elem;\n    }\n    return sum;\n}\n\nnotify(\"range and sum\");\nconsole.log(range(1, 10));\n// → [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconsole.log(range(5, 2, -1));\n// → [5, 4, 3, 2]\nconsole.log(sum(range(1, 10)));\n// → 55\n\n/**************************************************************\n * REVERSING AN ARRAY\n * \n * Arrays have a reverse method which changes the array by \n * inverting the order in which its elements appear. For this \n * exercise, write two functions, reverseArray and \n * reverseArrayInPlace. The first, reverseArray, takes an array \n * as argument and produces a new array that has the same \n * elements in the inverse order. The second, reverseArrayInPlace,\n * does what the reverse method does: it modifies the array \n * given as argument by reversing its elements. Neither may use \n * the standard reverse method.\n ****************************************************************/\n\nfunction reverseArray(arr) {\n    let reversed = [];\n    for (elem of arr) {\n        reversed.unshift(elem);\n    }\n    return reversed;\n}\n\nfunction reverseArrayInPlace(arr) {\n    for (let i = 0; i &lt; Math.floor(arr.length / 2); i++) {\n        let elem = arr[i];\n        let oppositeLocation = arr.length - i - 1;\n        arr[i] = arr[oppositeLocation];\n        arr[oppositeLocation] = elem;\n    }\n}\n\nnotify(\"reversing\");\nconsole.log(reverseArray([\"A\", \"B\", \"C\"]));\n// → [\"C\", \"B\", \"A\"];\nlet arrayValue = [1, 2, 3, 4, 5];\nreverseArrayInPlace(arrayValue);\nconsole.log(arrayValue);\n// → [5, 4, 3, 2, 1]\nlet arrayValue2 = range(1, 6);\nreverseArrayInPlace(arrayValue2);\nconsole.log(arrayValue2);",
    "crumbs": [
      "Exercises",
      "Dr. White's Eloquent JS Solutions"
    ]
  },
  {
    "objectID": "exercises/haverbeke-solutions.html#chapter-5-solutions",
    "href": "exercises/haverbeke-solutions.html#chapter-5-solutions",
    "title": "CSC 324",
    "section": "Chapter 5 Solutions",
    "text": "Chapter 5 Solutions\nfunction notify(text) {\n  console.log(`\\nTesting ${text} ...\\n`);\n}\n\n/*************************************************************\n * FLATTENING\n *\n * Use the reduce method in combination with the concat method\n * to “flatten” an array of arrays into a single array that has\n * all the elements of the input arrays.\n *************************************************************/\n\nfunction flatten(arr) {\n  return arr.reduce((acc, elem) =&gt; acc.concat(elem), []);\n}\n\nnotify(\"flatten\");\nlet array1 = [[1, 2], [3, 4], [5, 6, 7], [8]];\nconsole.log(flatten(array1));\n// Note that this solution works even when not all elements of the\n// array are themselves arrays:\nlet array2 = [0, [1,2], [3,4,5]];\nconsole.log(flatten(array2));\n// But flattening only goes one level deep:\nlet array3 = [[1], [2, 3, 4], [5, [6, 7]], [8]];\nconsole.log(flatten(array3));\n\n// a verbose version (to help show how reduce works):\nfunction verboseConcatenation(acc, elem) {\n  console.log(\"\\nWhat we have so far is:\");\n  console.log(acc);\n  console.log(\"To this we will append:\");\n  console.log(elem);\n  let more = acc.concat(elem);\n  return more;\n}\n\nfunction verboseFlatten(arr) {\n  return arr.reduce(verboseConcatenation, []);\n}\n\nnotify(\"the verbose form of the flatten function:\");\nlet flat1 = verboseFlatten(array1);\nconsole.log(\"\\nThe result is:\");\nconsole.log(flat1);\n\nlet flat2 = verboseFlatten(array3);\nconsole.log(\"\\nThe result is:\");\nconsole.log(array3);\n\n/*********************************************************************\n * Let's improve our function: have it flatten \"deeply\", \n * in the sense that the array that\n * it returns has no elements that are themselves arrays.\n ********************************************************************/\n\n\n// First, a helper-function:\nfunction isFlat(thing) {\n  if (!Array.isArray(thing)) {\n    // a non-array counts as \"flat\":\n    return true;\n  }\n  // if we got this far, thing is an array, so iterate through it:\n  for (elem of thing) {\n    if (Array.isArray(elem)) {\n      // found an array inside thing, so:\n      return false;\n    }\n  }\n  // if we got this far then no element of thing was an array, so:\n  return true;\n}\n\n// Next, a recursive function to flatten deeply:\nfunction deepFlatten(arr) {\n  if (isFlat(arr)) {\n    return arr;\n  }\n  return arr.reduce((acc, elem) =&gt; acc.concat(deepFlatten(elem)), []);\n}\n\nnotify(\"deepFlatten\");\nlet array4 = [[0,[[1]], [[2, 3]]], [[[[4], [[5], [6]]]]], [[7, 8]], 9, [[10]], 11];\nconsole.log(deepFlatten(array4));\n\n\n\n/***************************************************************\n * WRITE YOUR OWN LOOP FUNCTION\n ***************************************************************/\n\nfunction loop(value, test, update, bodyFn) {\n  while (test(value)) {\n    bodyFn(value);\n    value = update(value);\n  }\n}\n\nnotify(\"loop\");\nloop(3, n =&gt; n &gt; 0, n =&gt; n - 1, console.log);\n\n/**************************************************************\n * EVERYTHING\n *\n * Implement every as a function that takes an array and a\n * predicate function as parameters. Write two versions, one\n * using a loop and one using the some method.\n **************************************************************/\n\n// using loop\nfunction every(arr, predFn) {\n  for (elem of arr) {\n    if (!predFn(elem)) return false;\n  }\n  return true;\n}\n\nlet myArray = [1,2,3,4,5,6];\n\nnotify(\"every\");\nconsole.log(every(myArray, x =&gt; x &gt;= 2));\nconsole.log(every(myArray, x =&gt; x &gt;= 1));\n\n// using some method\nfunction every2(arr, predFn) {\n  return !arr.some((elem) =&gt; !predFn(elem));\n}\n\nnotify(\"every2\");\nconsole.log(every2(myArray, x =&gt; x &gt;= 2));\nconsole.log(every2(myArray, x =&gt; x &gt;= 1));",
    "crumbs": [
      "Exercises",
      "Dr. White's Eloquent JS Solutions"
    ]
  },
  {
    "objectID": "exercises/haverbeke-solutions.html#chapter-6-solutions",
    "href": "exercises/haverbeke-solutions.html#chapter-6-solutions",
    "title": "CSC 324",
    "section": "Chapter 6 Solutions",
    "text": "Chapter 6 Solutions\nfunction notify(text) {\n  console.log(`\\nTesting ${text} ...\\n`);\n}\n\n/***************************************************************\n * GROUP\n *\n * Write a class called Group (since Set is already taken). Like\n * Set, it has add, delete, and has methods. Its constructor\n * creates an empty group, add adds a value to the group (but\n * only if it isn’t already a member), delete removes its\n * argument from the group (it if was a member), and has\n * returns a Boolean value indicating whether its argument is\n * a member of the group.\n *\n * Use the === operator, or something equivalent such as\n * indexOf, to determine whether two values are the same.\n *\n * Give the class a static from method that takes an iteratable\n * object as argument and creates a group that contains all\n * the values produced by iterating over it.\n **************************************************************/\n\n// HSW:  This solution uses the relatively new includes method for arrays\n// (intrduced to JavaScript in the 2016 language standards)\n// instead of the suggested === operator or indexOf.\n// includes is just easier to work with, here!\nclass Group {\n  constructor() {\n    this.contents = [];\n    console.log(\"Creating an empty group.\");\n  }\n\n  has(x) {\n    return this.contents.includes(x);\n  }\n\n  add(x) {\n    if (this.has(x)) {\n      console.log(`This group already has ${x}.  Nothing will be done.`);\n    } else {\n      console.log(`Adding ${x} to the group.`);\n      this.contents.push(x);\n    }\n    return(this);\n  }\n\n  delete(x) {\n    if (this.has(x)) {\n      console.log(`Deleting ${x} from the group.`);\n      let leftOver = this.contents.filter(elem =&gt; elem !== x);\n      this.contents = leftOver;\n    } else {\n      console.log(`This group does not have ${x}.  Nothing will be done.`);\n    }\n    return(this);\n  }\n\n  static from(iterable) {\n    let group = new Group();\n    for (let value of iterable) {\n      if (!group.has(value)) {\n        group.add(value);\n      }\n    }\n    return group;\n  }\n}\n\n/*******************************************************************\n * Note on Static Methods:\n * \n * \"In JavaScript, the static keyword is used to define methods \n * or fields that belong to the class itself, rather than to any\n * specific instance of the class. This means that static properties\n * and methods are accessed directly on the class name, without \n * needing to create an object of that class.\"\n * -- AI Overview from a Google Search\n * \n * The AI Overview put it very well, I think!\n *********************************************************************/\n\nnotify(\"constructor for Group class\");\nlet group1 = new Group();\nconsole.log(group1);\n\nnotify(\"static from method of Group class\");\n// Below, note how the from method is \"accessed directly on the class name\":\nlet group2 = Group.from([10, 20]);\nconsole.log(group2);\n\nnotify(\"has method of Group class\");\nconsole.log(group2.has(10)); // → true\nconsole.log(group2.has(30)); // → false\n\nnotify(\"add method of Group class\");\ngroup2.add(30);\nconsole.log(group2);\ngroup2.add(10);\n\nnotify(\"delete method of Group class\");\ngroup2.delete(10);\nconsole.log(group2.has(10)); // -&gt; false\ngroup2.delete(10);\n\nnotify(\"method chaining\");\nlet group3 = new Group();\n// Methods that return the group acted upon can be chained:\ngroup3.add(1).add(2).add(3).add(3).delete(4).delete(3);\nconsole.log(group3);",
    "crumbs": [
      "Exercises",
      "Dr. White's Eloquent JS Solutions"
    ]
  },
  {
    "objectID": "exercises/eloquent-ch03.html",
    "href": "exercises/eloquent-ch03.html",
    "title": "CSC 324",
    "section": "",
    "text": "Read Chapter 3 of Eloquent JavaScript by Marijn Haverbeke.\n\n\n\nMarijn Haverbeke uses an image of Bodhidharma, an important figure in Chinese Zen legend, as his avatar on social media.\n\n\nWrite a JavaScript file in which you solve all of the exercises at the end of the chapter. Include it in your CSC324 git repository and push it to GitHub. The filename should be of the form ch03_firstname_lastname.js.",
    "crumbs": [
      "Exercises",
      "Eloquent Javascript:  Chapter 3"
    ]
  },
  {
    "objectID": "exercises/eloquent-ch02.html",
    "href": "exercises/eloquent-ch02.html",
    "title": "CSC 324",
    "section": "",
    "text": "Read Chapter 2 of Eloquent JavaScript by Marijn Haverbeke.\n\n\n\nMarijn Haverbeke uses an image of Bodhidharma, an important figure in Chinese Zen legend, as his avatar on social media.\n\n\nWrite a JavaScript file in which you solve all of the exercises at the end of the chapter. Push it to your Github repository. The filename should be of the form ch02_firstname_lastname.js.",
    "crumbs": [
      "Exercises",
      "Eloquent Javascript:  Chapter 2"
    ]
  },
  {
    "objectID": "exercises/index.html",
    "href": "exercises/index.html",
    "title": "Exercises",
    "section": "",
    "text": "Here are the exercises.",
    "crumbs": [
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/eloquent-ch01.html",
    "href": "exercises/eloquent-ch01.html",
    "title": "CSC 324",
    "section": "",
    "text": "Read Chapter 1 of Eloquent JavaScript by Marijn Haverbeke.\n\n\n\nMarijn Haverbeke uses an image of Bodhidharma, an important figure in Chinese Zen legend, as his avatar on social media.\n\n\nWe’ll discuss it in class; come prepared with any questions you might have.",
    "crumbs": [
      "Exercises",
      "Eloquent Javascript:  Chapter 1"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This site holds a few resources for CSC 324 as taught at Georgetown College, KY.\nFor now it’s just the prelminary Javascript exercises, and some examples of the use of JavaScript."
  },
  {
    "objectID": "exercises/eloquent-ch04.html",
    "href": "exercises/eloquent-ch04.html",
    "title": "CSC 324",
    "section": "",
    "text": "Read Chapter 4 of Eloquent JavaScript by Marijn Haverbeke.\n\n\n\nMarijn Haverbeke uses an image of Bodhidharma, an important figure in Chinese Zen legend, as his avatar on social media.\n\n\nWrite a JavaScript file in which you the following exercises at the end of the chapter:\n\nSum and Range\nReversing an Array\n\nInclude it in your CSC324 git repository and push it to GitHub. The filename should be of the form ch04_firstname_lastname.js.",
    "crumbs": [
      "Exercises",
      "Eloquent Javascript:  Chapter 4"
    ]
  },
  {
    "objectID": "exercises/table.html",
    "href": "exercises/table.html",
    "title": "CSC 324",
    "section": "",
    "text": "In this assignment you will use JavaScript in the browser to select a table and fill it with information obtained from an array of objects. You’ll get some practice with the DOM and with iteration.\nIn order to prepare for this exercise, read Chapters 13 and 14 of Eloquent JavaScript.\nAs preparation in class, we will study the following:\n\nPopulatiing a Table of Mountains\nPopulatiing a Table of Mountains (InnerHTML Approach)\nPopulatiing a Table of Mountains (with Hyperlinks)\n\nDownload this zip-file and extract it into your CSC 324 repo. Note that the custom.js file defines an array called artists. Complete the file with code that locates the table on the index page and populates it with the information in artists.\n\n\n\nWhen the page is loaded and the browser has run the code in custom.js, the page should look like the image above.\n\n\nMake a folder in your CSC324 repository, called table-assign. The completed page with all of its assets should be in this folder and should be pushed to the repository by the due-date.",
    "crumbs": [
      "Exercises",
      "Making a Table"
    ]
  },
  {
    "objectID": "exercises/eloquent-ch05.html",
    "href": "exercises/eloquent-ch05.html",
    "title": "CSC 324",
    "section": "",
    "text": "Read Chapter 5 of Eloquent JavaScript by Marijn Haverbeke.\n\n\n\nMarijn Haverbeke uses an image of Bodhidharma, an important figure in Chinese Zen legend, as his avatar on social media.\n\n\nWrite a JavaScript file in which you the following exercises at the end of the chapter:\n\nFlattening\nWRITE YOUR OWN LOOP FUNCTION\nEverything\n\nInclude it in your CSC324 git repository and push it to GitHub. The filename should be of the form ch05_firstname_lastname.js.",
    "crumbs": [
      "Exercises",
      "Eloquent Javascript:  Chapter 5"
    ]
  },
  {
    "objectID": "exercises/eloquent-ch06.html",
    "href": "exercises/eloquent-ch06.html",
    "title": "CSC 324",
    "section": "",
    "text": "Read Chapter 6 of Eloquent JavaScript by Marijn Haverbeke.\n\n\n\nMarijn Haverbeke uses an image of Bodhidharma, an important figure in Chinese Zen legend, as his avatar on social media.\n\n\nWrite a JavaScript file in which you work the following exercise at the end of the chapter:\n\nGroup\n\nInclude it in your CSC324 git repository and push it to GitHub. The filename should be of the form ch06_firstname_lastname.js.",
    "crumbs": [
      "Exercises",
      "Eloquent Javascript:  Chapter 6"
    ]
  },
  {
    "objectID": "exercises/table-sort.html",
    "href": "exercises/table-sort.html",
    "title": "CSC 324",
    "section": "",
    "text": "In this assignment you add some buttons to the table you created and populated in a previous assignment. You will practice handling events in JavaScript.\nIn order to prepare for this exercise, read Chapter 15 of Eloquent JavaScript. To learn about sorting, we will study this JavaScript file in class.\nStarting from the site that populates a table of Bhangra artists, add three buttons:\n\na button that when clicked will sort the artists by name;\na button that when clicked will sort the artists by year of birth;\na button that when clicked will randomly shuffle the rows of the original table.\n\nMake a folder in your CSC324 repository, called table-sort. The completed page with all of its assets should be in this folder and should be pushed to the repository by the due-date.",
    "crumbs": [
      "Exercises",
      "Sorting a Table"
    ]
  },
  {
    "objectID": "examples/index.html",
    "href": "examples/index.html",
    "title": "Examples",
    "section": "",
    "text": "Here are a few exampples.",
    "crumbs": [
      "Examples"
    ]
  }
]