[
  {
    "objectID": "examples/example_01.html",
    "href": "examples/example_01.html",
    "title": "Penguins",
    "section": "",
    "text": "A simple example based on Allison Horst’s Palmer Penguins dataset. Here we look at how penguin body mass varies across both sex and species (use the provided inputs to filter the dataset by bill length and island):\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass_g\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\n\n\n\ndata = FileAttachment(\"penguins.csv\").csv({ typed: true })\n\n\n\n\n\n\n\nfiltered = data.filter(function(penguin) {\n  return bill_length_min &lt; penguin.bill_length_mm &&\n         islands.includes(penguin.island);\n})",
    "crumbs": [
      "Examples",
      "Penguins"
    ]
  },
  {
    "objectID": "exercises/haverbeke-solutions.html",
    "href": "exercises/haverbeke-solutions.html",
    "title": "CSC 324",
    "section": "",
    "text": "function notify(text) {\n  console.log(`\\nTesting ${text} ...\\n`);\n}\n\n/****************************************************\nLooping a Triangle\n\n Write a loop that makes seven calls to console.log to \n output the following triangle:\n\n#\n##\n###\n####\n#####\n######\n#######\n\nNotes on my solution:\n\nI wondered if Javascript had a function like R's rep(),\nso I googled \"javascript repeat character\" and found a\nnumber of sites, including:\n\nhttps://stackoverflow.com/questions/1877475/repeat-character-n-times\n\nThe repeat method for strings turned out to be just what\nI was looking for!\n\n*****************************************************/\n\nnotify(\"Looping a Triangle\");\n\nfor (let i = 1; i &lt;= 7; i++) {\n  console.log(\"#\".repeat(i));\n}\n\n/**************************************************************\n * \n * FizzBuzz\n * \n * Write a program that uses console.log to print all the numbers\n * from 1 to 100, with two exceptions. For numbers divisible by 3, \n * print \"Fizz\" instead of the number, and for numbers divisible by 5 \n * (and not 3), print \"Buzz\" instead.\n * \n * When you have that working, modify your program to print \n * \"FizzBuzz\" for numbers that are divisible by both 3 and 5 \n * (and still print \"Fizz\" or \"Buzz\" for numbers divisible by \n * only one of those).\n * \n ******************************************************************/\n\n // Version One\n notify(\"FizzBuzz, Version 1\");\nfor (let i = 1; i &lt;= 100; i++) {\n  if (i % 3 === 0) {\n    console.log(\"Fizz\");\n  } else if (i % 5 === 0) {\n      console.log(\"Buzz\");\n  } else {\n    console.log(i);\n  }\n}\n\n// Version Two\nnotify(\"FizzBuzz, Version 2\");\nfor (let i = 1; i &lt;= 100; i++) {\n  if (i % 15 === 0) {\n    console.log(\"FizzBuzz\");\n  } else if (i % 3 === 0) {\n      console.log(\"Fizz\");\n  } else if (i % 5 === 0) {\n    console.log(\"Buzz\");\n  } else {\n    console.log(i);\n  }\n}\n\n/*******************************************************************\n * \n * Chessboard\n * \n * Write a program that creates a string that represents an 8×8 \n * grid, using newline characters to separate lines. At each \n * position of the grid there is either a space or a \"#\" \n * character. The characters should form a chessboard.\n * \n * Passing this string to console.log should show something like this:\n\n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # #\n\n\n * When you have a program that generates this pattern, define a \n * binding size = 8 and change the program so that it works \n * for any size, outputting a grid of the given width and height.\n * \n ********************************************************************/\n\n// I'll move directly to the more general version\n\nconst size = 9;\nconst pairs = Math.floor(size / 2),\n      oddRow = \" #\".repeat(pairs) + \"\\n\",\n      evenRow = \"# \".repeat(pairs) + \"\\n\",\n      twoRows = oddRow + evenRow,\n      board = twoRows.repeat(pairs),\n      extraRow = size %2 === 1 ? oddRow : '';\n\nnotify(`Chessboard, with size = ${size}`);\nconsole.log(board + extraRow);",
    "crumbs": [
      "Exercises",
      "Dr. White's Eloquent JS Solutions"
    ]
  },
  {
    "objectID": "exercises/haverbeke-solutions.html#chapter-2-solutions",
    "href": "exercises/haverbeke-solutions.html#chapter-2-solutions",
    "title": "CSC 324",
    "section": "",
    "text": "function notify(text) {\n  console.log(`\\nTesting ${text} ...\\n`);\n}\n\n/****************************************************\nLooping a Triangle\n\n Write a loop that makes seven calls to console.log to \n output the following triangle:\n\n#\n##\n###\n####\n#####\n######\n#######\n\nNotes on my solution:\n\nI wondered if Javascript had a function like R's rep(),\nso I googled \"javascript repeat character\" and found a\nnumber of sites, including:\n\nhttps://stackoverflow.com/questions/1877475/repeat-character-n-times\n\nThe repeat method for strings turned out to be just what\nI was looking for!\n\n*****************************************************/\n\nnotify(\"Looping a Triangle\");\n\nfor (let i = 1; i &lt;= 7; i++) {\n  console.log(\"#\".repeat(i));\n}\n\n/**************************************************************\n * \n * FizzBuzz\n * \n * Write a program that uses console.log to print all the numbers\n * from 1 to 100, with two exceptions. For numbers divisible by 3, \n * print \"Fizz\" instead of the number, and for numbers divisible by 5 \n * (and not 3), print \"Buzz\" instead.\n * \n * When you have that working, modify your program to print \n * \"FizzBuzz\" for numbers that are divisible by both 3 and 5 \n * (and still print \"Fizz\" or \"Buzz\" for numbers divisible by \n * only one of those).\n * \n ******************************************************************/\n\n // Version One\n notify(\"FizzBuzz, Version 1\");\nfor (let i = 1; i &lt;= 100; i++) {\n  if (i % 3 === 0) {\n    console.log(\"Fizz\");\n  } else if (i % 5 === 0) {\n      console.log(\"Buzz\");\n  } else {\n    console.log(i);\n  }\n}\n\n// Version Two\nnotify(\"FizzBuzz, Version 2\");\nfor (let i = 1; i &lt;= 100; i++) {\n  if (i % 15 === 0) {\n    console.log(\"FizzBuzz\");\n  } else if (i % 3 === 0) {\n      console.log(\"Fizz\");\n  } else if (i % 5 === 0) {\n    console.log(\"Buzz\");\n  } else {\n    console.log(i);\n  }\n}\n\n/*******************************************************************\n * \n * Chessboard\n * \n * Write a program that creates a string that represents an 8×8 \n * grid, using newline characters to separate lines. At each \n * position of the grid there is either a space or a \"#\" \n * character. The characters should form a chessboard.\n * \n * Passing this string to console.log should show something like this:\n\n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # #\n\n\n * When you have a program that generates this pattern, define a \n * binding size = 8 and change the program so that it works \n * for any size, outputting a grid of the given width and height.\n * \n ********************************************************************/\n\n// I'll move directly to the more general version\n\nconst size = 9;\nconst pairs = Math.floor(size / 2),\n      oddRow = \" #\".repeat(pairs) + \"\\n\",\n      evenRow = \"# \".repeat(pairs) + \"\\n\",\n      twoRows = oddRow + evenRow,\n      board = twoRows.repeat(pairs),\n      extraRow = size %2 === 1 ? oddRow : '';\n\nnotify(`Chessboard, with size = ${size}`);\nconsole.log(board + extraRow);",
    "crumbs": [
      "Exercises",
      "Dr. White's Eloquent JS Solutions"
    ]
  },
  {
    "objectID": "exercises/eloquent-ch03.html",
    "href": "exercises/eloquent-ch03.html",
    "title": "CSC 324",
    "section": "",
    "text": "Read Chapter 3 of Eloquent JavaScript by Marijn Haverbeke.\n\n\n\nMarijn Haverbeke uses an image of Bodhidharma, an important figure in Chinese Zen legend, as his avatar on social media.\n\n\nWrite a JavaScript file in which you solve all of the exercises at the end of the chapter. Include it in your CSC324 git repository and push it to GitHub. The filename should be of the form ch03_firstname_lastname.js.",
    "crumbs": [
      "Exercises",
      "Eloquent Javascript:  Chapter 3"
    ]
  },
  {
    "objectID": "exercises/eloquent-ch02.html",
    "href": "exercises/eloquent-ch02.html",
    "title": "CSC 324",
    "section": "",
    "text": "Read Chapter 2 of Eloquent JavaScript by Marijn Haverbeke.\n\n\n\nMarijn Haverbeke uses an image of Bodhidharma, an important figure in Chinese Zen legend, as his avatar on social media.\n\n\nWrite a JavaScript file in which you solve all of the exercises at the end of the chapter. Push it to your Github repository. The filename should be of the form ch02_firstname_lastname.js.",
    "crumbs": [
      "Exercises",
      "Eloquent Javascript:  Chapter 2"
    ]
  },
  {
    "objectID": "exercises/index.html",
    "href": "exercises/index.html",
    "title": "Exercises",
    "section": "",
    "text": "Here are the exercises.",
    "crumbs": [
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/eloquent-ch01.html",
    "href": "exercises/eloquent-ch01.html",
    "title": "CSC 324",
    "section": "",
    "text": "Read Chapter 1 of Eloquent JavaScript by Marijn Haverbeke.\n\n\n\nMarijn Haverbeke uses an image of Bodhidharma, an important figure in Chinese Zen legend, as his avatar on social media.\n\n\nWe’ll discuss it in class; come prepared with any questions you might have.",
    "crumbs": [
      "Exercises",
      "Eloquent Javascript:  Chapter 1"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This site holds a few resources for CSC 324 as taught at Georgetown College, KY.\nFor now it’s just the prelminary Javascript exercises, and some examples of the use of JavaScript."
  },
  {
    "objectID": "exercises/eloquent-ch04.html",
    "href": "exercises/eloquent-ch04.html",
    "title": "CSC 324",
    "section": "",
    "text": "Read Chapter 4 of Eloquent JavaScript by Marijn Haverbeke.\n\n\n\nMarijn Haverbeke uses an image of Bodhidharma, an important figure in Chinese Zen legend, as his avatar on social media.\n\n\nWrite a JavaScript file in which you the following exercises at the end of the chapter:\n\nSum and Range\nReversing an Array\n\nInclude it in your CSC324 git repository and push it to GitHub. The filename should be of the form ch04_firstname_lastname.js.",
    "crumbs": [
      "Exercises",
      "Eloquent Javascript:  Chapter 4"
    ]
  },
  {
    "objectID": "exercises/table.html",
    "href": "exercises/table.html",
    "title": "CSC 324",
    "section": "",
    "text": "In this assignment you will use JavaScript in the browser to select a table and fill it with information obtained from an array of objects. You’ll get some practice with the DOM and with iteration.\nIn order to prepare for this exercise, read Chapters 13 and 14 of Eloquent JavaScript.\nDownload this zip-file and extract it into your CSC 324 repo. Note that the custom.js file defines an array called artists. Complete the file with code that locates the table on the index page and populates it with the information in artists.\n\n\n\nWhen the page is loaded and the browser has run the code in custom.js, the page should look like the image above.\n\n\nMake a folder in your CSC324 repository, called table-assign. The completed page with all of its assets should be in this folder and should be pushed to the repository by the due-date.",
    "crumbs": [
      "Exercises",
      "Making a Table"
    ]
  },
  {
    "objectID": "exercises/eloquent-ch05.html",
    "href": "exercises/eloquent-ch05.html",
    "title": "CSC 324",
    "section": "",
    "text": "Read Chapter 5 of Eloquent JavaScript by Marijn Haverbeke.\n\n\n\nMarijn Haverbeke uses an image of Bodhidharma, an important figure in Chinese Zen legend, as his avatar on social media.\n\n\nWrite a JavaScript file in which you the following exercises at the end of the chapter:\n\nFlattening\nWRITE YOUR OWN LOOP FUNCTION\nEverything\n\nInclude it in your CSC324 git repository and push it to GitHub. The filename should be of the form ch05_firstname_lastname.js.",
    "crumbs": [
      "Exercises",
      "Eloquent Javascript:  Chapter 5"
    ]
  },
  {
    "objectID": "exercises/eloquent-ch06.html",
    "href": "exercises/eloquent-ch06.html",
    "title": "CSC 324",
    "section": "",
    "text": "Read Chapter 6 of Eloquent JavaScript by Marijn Haverbeke.\n\n\n\nMarijn Haverbeke uses an image of Bodhidharma, an important figure in Chinese Zen legend, as his avatar on social media.\n\n\nWrite a JavaScript file in which you work the following exercise at the end of the chapter:\n\nGroup\n\nInclude it in your CSC324 git repository and push it to GitHub. The filename should be of the form ch06_firstname_lastname.js.",
    "crumbs": [
      "Exercises",
      "Eloquent Javascript:  Chapter 6"
    ]
  },
  {
    "objectID": "exercises/table-sort.html",
    "href": "exercises/table-sort.html",
    "title": "CSC 324",
    "section": "",
    "text": "In this assignment you add some buttons to the table you created and populated in a previous assignment. You will practice handling events in JavaScript.\nIn order to prepare for this exercise, read Chapter 15 of Eloquent JavaScript.\nStarting from the site that populates a table of Bhangra artists, add three buttons:\n\na button that when clicked will sort the artists by name;\na button that when clicked will sort the artists by year of birth;\na button that when clicked will randomly shuffle the rows of the original table.\n\nMake a folder in your CSC324 repository, called table-sort. The completed page with all of its assets should be in this folder and should be pushed to the repository by the due-date.",
    "crumbs": [
      "Exercises",
      "Sorting a Table"
    ]
  },
  {
    "objectID": "examples/index.html",
    "href": "examples/index.html",
    "title": "Examples",
    "section": "",
    "text": "Here are a few exampples.",
    "crumbs": [
      "Examples"
    ]
  }
]